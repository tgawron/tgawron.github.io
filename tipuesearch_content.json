{"pages":[{"url":"http://www.tomaszgawron.pl/ksis_framework.en.html","text":"Table of Contents 1. Introduction 2. KSIS Framework characteristics 2.1. Familiar, tried and tested tools 2.2. No repetition and minimal knowledge required 2.3. A simple API consisting of an embedded domain-specific language 2.4. Correctness guarantees and determinism 2.5. High performance and cheap abstractions 2.6. Flexible synchronization 2.7. Runtime reconfiguration 2.8. Some decisions were made for the developer 2.9. Write once, execute on different devices 2.10. Seamless ROS integration 2.11. Batteries included 3. Current state of development 1 Introduction Robotic software systems developed in the recent years are designed to solve more and more complex tasks. To achieve their successful operation, those systems must robustly and efficiently process data flowing from diverse sources by utilizing complex algorithms developed at times by specialists from different fields. Such systems can quickly become hard to maintain and extend if not designed correctly. Moreover, since the field is young, many robotics systems are developed by researchers, who need an ability to rapidly prototype new functionalities and change structure of the system to validate new ideas. As the robotics community matured, several open source robotics middleware software packages emerged. Currently developers have many choices: from the widely adopted ROS, through real-time capable OROCOS, to more experimental URBI with its own language - urbiscript. While most of them provide acceptable solutions to common problems, it is my experience that most of them do not provide a full solution to the specific problems faced by developers of real-time feedback control systems for robotics. KSIS Framework is a small and simple robotic middleware, a micro-middleware if You will, which attempts solve those specific problems as briefly described below. 2 KSIS Framework characteristics 2.1 Familiar, tried and tested tools KSIS Framework is written a static C++ library with some auxiliary Python scripts. It is compatible with any C++11 compiler and can be used with an arbitrary development environemnt. 2.2 No repetition and minimal knowledge required Many existing robotic middlewares require more or less extensive knowledge of specific configuration files, conventions and semantics, which their user must keep in mind during prototyping, maintenance and debugging of the system. The large amount of user-maintained settings leads to many errors which could be easily avoided and confusion of new users or users returning after a significant break from development, which is often the case in academic environment. Creating a new library of KSIS Framework modules is as simple as invoking a single script. Introducing a new module is as simple as creating a new file. Composing an executable application from modules is as simple as creating several objects or supplying another supported source of modules, which should be considered by KSIS Framework. The user is not required to update any configuration files or repeat any information. KSIS Framework infers it's knowledge about supplied modules from their definitions in C++ source code. 2.3 A simple API consisting of an embedded domain-specific language KSIS Framework modules are defined in C++. A module is defined by a C++ class with a special annotation line. Contracts specifying data accepted and produced by the module are specified by definition of special member variables. Other than that, a module is a first-class object and can be treated as any other C++ class. 2.4 Correctness guarantees and determinism Many middlewares introduce dynamic typing or other dynamic binding mechanism in such a way that, one cannot verify whether the modules producing data required for correct system operation have been loaded and connected properly to other modules. In KSIS Framework, different signals specified by the user as module inputs and outputs have different types. By definition, a set of modules can be composed by KSIS Framework in only one way. Thus, the user implicitly defines an arbitrarily complex system structure by defining simple modules. KSIS Framework can automatically determine if a set of modules can be safely composed. Missing data sources, spurious control signals, accidental signal feedback loops or modules with overlapping functionalities are detected. The errors are detected before application is run. 2.5 High performance and cheap abstractions KSIS Framework ensures a zero-copy dataflow between modules. The overhead of a single processing cycle for a module is a single function call. No interprocess communication, serialization or marshalling is required inside KSIS Framework. Creating and composing modules is cheap enough, that even simple functionality can be abstracted into module. Performance is never compromised by modularity. 2.6 Flexible synchronization The user can specify during module definition if processing carried out by the module should be triggered by specific signal updates or if it should be done periodically. Any combination of those is possible. It is guaranteed that modules triggering each other will be called in the order of triggering without any delays, since the generated call will be equivalent to a sequence of function calls with some additional processing. As a result, KSIS Framework enables the user to define complex, extensible, sequential processing chains without a performance penalty or problems with order of operations. 2.7 Runtime reconfiguration Application structure can be changed by adding or removing modules at runtime. KSIS Framework will suspend the application, reconfigure and check for correctness of the modified structure. Module definitions can also provide parameters which can be modified outside of the KSIS Framework process. 2.8 Some decisions were made for the developer It is worth noting that most of the problems are solved by taking a different approach to them, which simplifies their solution greatly. It is my belief that while flexibility is desired, API's allowing for multiple vastly different solutions to the same problems are not very helpful for developers. In that spirit, KSIS Framework forces its users to adopt a specific approach to some common problems and development tasks for the sake of standardization, simplicity and performance. The crucial benefit of such a development methodology is that the developer does not have to make any decisions about software architecture and software engineering problems. Instead the developer is forced to make explicit decisions about the logical structure of the system, which is his area of expertise in the first place. 2.9 Write once, execute on different devices While KSIS Framework currently supports only PC's running Linux, a port for STM microcontrollers is being developed. Some early experiments have shown that control algorithms implemented in KSIS Framework can be used also in very constrained, embedded environments. 2.10 Seamless ROS integration KSIS Framework is not designed to replace ROS, but to complement it in specific scenarios. Currently KSIS Framework can seamlessly integrate with ROS by connecting its signals to ROS topics and utilizing facilities such as e.g. ROS parameter server. This gives the user access to a vast amount of open source libraries in the ROS ecosystem from the KSIS Framework. 2.11 Batteries included KSIS Framework is accompanied by KSIS Control library which utilizes KSIS Framework and ROS to provide a powerful motion control solution for mobile robots, with the emphasis on wheeled mobile robots. After implementation of few hardware-specific modules, the user of KSIS Control is provided with a control GUI, visualization, a simple control simulation environment, debugging tools, dynamic settings editor and a variety of closed-loop motion controllers for wheeled mobile robots. 3 Current state of development At the moment there are 3 kinds of wheeled mobile robot platforms controlled entirely by KSIS Control at the Chair of Control and Systems Engineering, Poznan University of Technology. Numerous experiments with those platforms have been performed to test the viability of KSIS Framework and KSIS Control. Several control and planning algorithms have been prototyped in KSIS Framework. Currently KSIS Framework is still in its development phase. While it is planned to be released publicly as a free library, an exact date of such a release is not yet known. If You want to take a peek at the current version, collaborate or suggest some features do not hesitate to emaile me at omasz.gawron.priv[at]gmail.com or tomasz.gawron[at]doctorate.put.poznan.pl.","tags":"articles","title":"Introducing KSIS Framework"}]}